Sobre o Bot:
-- Este bot foi desenvolvido para fornecer informa√ß√µes sobre restaurantes pr√≥ximos √† UNCISAL (Universidade Estadual de Ci√™ncias da Sa√∫de de Alagoas), utilizando a API Geoapify para buscar lugares pr√≥ximos. 
-- O bot responde a intera√ß√µes com bot√µes, permitindo que o usu√°rio consulte os restaurantes mais pr√≥ximos e suas avalia√ß√µes.

Abaixo est√° a explica√ß√£o de cada linha de c√≥digo escrita para desenvolver o bot:

[ 
const { Telegraf, Markup } = require('telegraf');
const axios = require('axios');
require('dotenv').config(); 
] 
-- Telegraf: √â a biblioteca usada para criar bots no Telegram. O Telegraf facilita a intera√ß√£o com a API do Telegram e a manipula√ß√£o de mensagens, bot√µes e comandos. 
-- Markup: √â uma funcionalidade do Telegraf que facilita a cria√ß√£o de bot√µes e teclados interativos no Telegram.
-- axios: √â uma biblioteca que facilita fazer requisi√ß√µes HTTP (como a que usamos para buscar os restaurantes na API do Geoapify).
-- require('dotenv').config(): Carrega as vari√°veis de ambiente do arquivo .env (como o token do bot e a chave da API do Geoapify).

[
function haversine(lat1, lon1, lat2, lon2) {
  const R = 6371; // Raio da Terra em quil√¥metros
  const dLat = (lat2 - lat1) * (Math.PI / 180);
  const dLon = (lon2 - lon1) * (Math.PI / 180);
  const a =
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(lat1 * (Math.PI / 180)) *
      Math.cos(lat2 * (Math.PI / 180)) *
      Math.sin(dLon / 2) * Math.sin(dLon / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c; // Dist√¢ncia em quil√¥metros
}
] 
-- Esta fun√ß√£o haversine calcula a dist√¢ncia entre dois pontos geogr√°ficos (latitude e longitude) usando a f√≥rmula de Haversine, que √© muito usada em c√°lculos de dist√¢ncias entre coordenadas geogr√°ficas. 
-- O resultado √© a dist√¢ncia em quil√¥metros.

[
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
] 
-- Cria o bot usando o token fornecido pela vari√°vel de ambiente TELEGRAM_BOT_TOKEN (que est√° no arquivo .env).

[
const UNCISAL_LOCATION = { lat: -9.673360, lon: -35.758585 };
]
-- Define a localiza√ß√£o da UNCISAL (Universidade Estadual de Ci√™ncias da Sa√∫de de Alagoas) com as coordenadas de latitude e longitude.

[
bot.start((ctx) => {
  ctx.reply(
    'Ol√°, como posso te ajudar?',
    Markup.inlineKeyboard([
      Markup.button.callback('Ver restaurantes por perto', 'show_restaurants'),
      Markup.button.callback('Sair', 'exit'),
    ])
  );
});
]
-- bot.start: Este comando √© acionado quando o usu√°rio inicia uma conversa com o bot. O bot envia uma mensagem inicial com um texto de sauda√ß√£o ("Ol√°, como posso te ajudar?") e dois bot√µes: "Ver restaurantes por perto" e "Sair".
-- Markup.inlineKeyboard: Cria os bot√µes interativos que o usu√°rio pode clicar.

[
bot.on('text', (ctx) => {
  ctx.reply(
    'Ol√°, como posso te ajudar?',
    Markup.inlineKeyboard([
      Markup.button.callback('Ver restaurantes por perto', 'show_restaurants'),
      Markup.button.callback('Sair', 'exit'),
    ])
  );
});
]
-- bot.on('text', ...): Este comando faz com que o bot responda a qualquer mensagem de texto enviada pelo usu√°rio com a mesma sauda√ß√£o e os mesmos bot√µes que aparecem no comando /start.

[
bot.action('show_restaurants', async (ctx) => {
  try {
    await ctx.reply('Buscando restaurantes pr√≥ximos...');

    const response = await axios.get('https://api.geoapify.com/v2/places', {
      params: {
        categories: 'catering.restaurant',
        bias: `proximity:${UNCISAL_LOCATION.lon},${UNCISAL_LOCATION.lat}`,
        limit: 10,
        apiKey: process.env.GEOAPIFY_API_KEY,
      },
    });

    const places = response.data.features;

    if (places.length === 0) {
      ctx.reply('N√£o encontramos restaurantes pr√≥ximos.');
      return;
    }

    // Ordenar os restaurantes pela proximidade, do mais pr√≥ximo para o mais distante
    const sortedPlaces = places.map((place) => {
      const { lat, lon } = place.properties;
      const distance = haversine(UNCISAL_LOCATION.lat, UNCISAL_LOCATION.lon, lat, lon);
      return { place, distance };
    }).sort((a, b) => a.distance - b.distance); // Ordena pela dist√¢ncia (mais pr√≥ximo primeiro)

    const results = sortedPlaces
    .filter((item) => item.place.properties.name) // Filtra restaurantes sem nome
    .map((item, index) => {
      const place = item.place;
      const name = place.properties.name || 'Sem nome';
      const address = place.properties.address_line1 || 'Endere√ßo n√£o dispon√≠vel';
      const rating = place.properties.rating !== undefined 
        ? `${place.properties.rating} estrelas` 
        : 'Avalia√ß√£o n√£o dispon√≠vel';
  
      const { lat, lon } = place.properties;
      const mapsLink = `https://www.google.com/maps?q=${lat},${lon}`;
  
      return `${index + 1}. ${name}\nüìç Localiza√ß√£o: ${address}\n‚≠ê Nota: ${rating}\nüåê [Abrir no Maps](${mapsLink})\n`;
    });

    // Envia a lista de restaurantes com o Markdown habilitado
    ctx.reply(results.join('\n\n'), { parse_mode: 'Markdown' });
  } catch (error) {
    console.error(error);
    ctx.reply('Ocorreu um erro ao buscar os restaurantes. Tente novamente mais tarde.');
  }
});
]
-- bot.action('show_restaurants', ...): Este comando √© acionado quando o usu√°rio clica no bot√£o "Ver restaurantes por perto". O bot ent√£o envia a mensagem "Buscando restaurantes pr√≥ximos...".
-- async: A fun√ß√£o √© ass√≠ncrona, pois estamos fazendo uma requisi√ß√£o HTTP para buscar os restaurantes, o que pode levar algum tempo.
-- categories: 'catering.restaurant': Filtra para mostrar apenas restaurantes.
-- bias: proximity:${UNCISAL_LOCATION.lon},${UNCISAL_LOCATION.lat}: Define que a busca ser√° centrada nas coordenadas da UNCISAL.
-- limit: 10: Limita o n√∫mero de resultados a 10.
-- apiKey: process.env.GEOAPIFY_API_KEY: Usa a chave da API do Geoapify que est√° no arquivo .env.
-- Extrai a lista de lugares (restaurantes) da resposta da API.
-- Verifica se n√£o foram encontrados restaurantes pr√≥ximos e envia uma mensagem informando isso ao usu√°rio.
-- Para cada restaurante, calcula a dist√¢ncia at√© a UNCISAL usando a fun√ß√£o haversine e ordena os restaurantes pela proximidade (do mais pr√≥ximo para o mais distante).
-- Aqui, o bot mapeia cada restaurante para uma string formatada com o nome, endere√ßo, avalia√ß√£o e um link para abrir no Google Maps. Esses dados s√£o coletados da resposta da API do Geoapify.
-- filter((item) => item.place.properties.name): A fun√ß√£o filter √© usada para excluir os restaurantes que n√£o t√™m um nome. Se item.place.properties.name for undefined ou uma string vazia, o restaurante ser√° exclu√≠do da lista.
-- Caso ocorra um erro durante a requisi√ß√£o ou processamento, o bot captura o erro e envia uma mensagem de erro ao usu√°rio.
-- bot.action('exit', ...): Este comando √© acionado quando o usu√°rio clica no bot√£o "Sair". O bot responde com "At√© logo!".
-- bot.launch(): Inicia o bot, colocando-o em execu√ß√£o.
-- console.log('Bot em execu√ß√£o...'): Exibe uma mensagem no console para indicar que o bot est√° em funcionamento.

DIFEREN√áA ENTRE A API GEOAPIFY_API_KEY E GOOGLE PLACES API:
-- Geoapify: A API do Geoapify oferece uma maneira simples e acess√≠vel de buscar locais pr√≥ximos, como restaurantes, mas pode n√£o ser t√£o precisa ou rica em dados quanto a API do Google. A Geoapify oferece uma boa cobertura, mas n√£o tem a mesma base de dados ou a mesma qualidade de informa√ß√µes que o Google, especialmente no que diz respeito a detalhes como avalia√ß√µes de usu√°rios, hor√°rios de funcionamento, fotos e outros dados complementares.
-- Google Places API: A API do Google Places √© amplamente reconhecida por sua qualidade e precis√£o. Ela tem uma base de dados muito maior e mais detalhada, com informa√ß√µes mais completas sobre os lugares, incluindo avalia√ß√µes, fotos, hor√°rios de pico e muito mais. Al√©m disso, a API do Google tem recursos avan√ßados, como detec√ß√£o de pontos de interesse mais pr√≥ximos com base em mapas, oferecendo uma experi√™ncia de busca muito mais refinada. Isso significa que, se voc√™ usasse a API do Google, os resultados de restaurantes seriam mais precisos, com melhores avalia√ß√µes, imagens e outros detalhes √∫teis.
-- Sim, se voc√™ usasse a API do Google, os resultados seriam consideravelmente melhores, com mais informa√ß√µes e mais precis√£o na busca.

DIFEREN√áA ENTRE DO EASYINDEX PARA O INDEX: 
-- Fun√ß√µes de callback simples: O c√≥digo agora usa fun√ß√µes tradicionais com function em vez de fun√ß√µes de flecha (=>).
-- Uso de for em vez de map e filter: No lugar de usar map para transformar os dados e filter para filtrar os restaurantes sem nome, utilizamos o for tradicional para iterar sobre os restaurantes e fazer as verifica√ß√µes necess√°rias.
-- Constru√ß√£o da lista de resultados: A lista de resultados √© constru√≠da manualmente com uma string (results +=), o que √© mais simples, mas menos eficiente do que usar map ou filter.
-- Verifica√ß√£o de nome: Se o restaurante n√£o tiver nome, ele √© ignorado com continue no loop for.